datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Artist {
  id        Int      @id @default(autoincrement())
  image     String
  name      String
  albums    Album[]  @relation("ArtistAlbums")
  songs     Song[]   @relation("ArtistSongs")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Album {
  id          Int      @id @default(autoincrement())
  image       String
  title       String
  releaseDate DateTime
  artistId    Int
  artist      Artist   @relation(fields: [artistId], references: [id], name: "ArtistAlbums")
  songs       Song[]   @relation("AlbumSongs")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Song {
  id        Int                @id @default(autoincrement())
  image     String
  title     String
  duration  Int // duration in seconds
  albumId   Int
  album     Album              @relation(fields: [albumId], references: [id], name: "AlbumSongs")
  artistId  Int
  artist    Artist             @relation(fields: [artistId], references: [id], name: "ArtistSongs")
  playlists SongsOnPlaylists[]
  ratings   Rating[]
  reviews   Review[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Playlist {
  id        Int                @id @default(autoincrement())
  image     String
  name      String
  songs     SongsOnPlaylists[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model SongsOnPlaylists {
  song       Song     @relation(fields: [songId], references: [id])
  songId     Int // relation scalar field (used in the `@relation` attribute above)
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([songId, playlistId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int // 1 to 5 star rating
  songId    Int
  song      Song     @relation(fields: [songId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([songId, userId])
}

model Review {
  id        Int      @id @default(autoincrement())
  text      String
  songId    Int
  song      Song     @relation(fields: [songId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// next auth

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  ratings       Rating[]
  reviews       Review[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
